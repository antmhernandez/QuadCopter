Motor Servos take 0 - 180
Joysticks output 0 - 1023, with 512 at 'center'

Drone Motors:
  FL      FR

  BL      BR

FL and BR spin clockwise
FR and BL spin counterclockwise

Joystick Outputs:
  Throttle: 0 - 1023
w Yaw:      0 - 1023

x Pitch:    0 - 1023
y Roll:     0 - 1023

For example, a joystick command to give:
JS1:  Full Throttle  (1023)
      0 Yaw          (512)
JS2:  Full Right     (1023)
      Full Forward   (1023)
For values T, Y, P, R,

  FL                          FR
1023-512 = 511 -> 180?
512-512 = 0 -> 0



"Dead Zone": Create 'senseless' region for thumb, more for throttle, less for yaw
    Dead Yaw: 500 - 524
    Dead Throttle: 475 - 550

Auto-Balance: record total displacements x, y, z.
    When Pitch/Roll Joystick is in "dead zone", apply motor power to undo net angular displacement.
    Must account for offset Center of Gravity
Trim Function:
    Add trim function to self balance:
        Self-Balance Trim must store values to trim in x, y, z angular directions.
    Add button to manually trim. How to interact with auto-balance/trim?
Auto-kill a wild gyroscope. Sometimes, after quick change, it continues to increase wildly.

Limit Pitch and Roll:
    Use gyroscope to record angular displacement. Limit to set max angular displacement in x, y, z
    Use proportion to convert joystick value to acceptable range



Motor Functions:
//Example of pin read and function calls in loop()
throttle = analogRead(throttle);  //in loop()
yaw = analogRead(yaw);
roll = analogRead(roll);
pitch = analogRead(pitch);
int flPower = fl(roll, pitch, yaw, throttle);
int frPower = fr(roll, pitch, yaw, throttle);
int blPower = bl(roll, pitch, yaw, throttle);
int brPower = br(roll, pitch, yaw, throttle);

//Read Joystick Center Value when not pressed:
int centerThrottle = analogRead(throttlePin); //read left 
int centerYaw = analogRead (yawPin);
int centerRoll = analogRead(rollPin);
int centerPitch = analogRead(pitchPin);

//Define variables to be calculated individually for each motor
int throttleFL = 0, throttleFR = 0, throttleBL = 0, throttleBR = 0;
int yawFL = 0, yawFR = 0, yawBL = 0, yawBR = 0;
int rollFL = 0, rollFR = 0, rollBL = 0, rollBR = 0;
int pitchFL = 0, pitchFR = 0, pitchBL = 0, pitchBR = 0;

//Set Max values for Throttle, Yaw, Roll, and Pitch. Max sum = 180. Is this too high?!?!
int maxMotorThrottle = 90;
int maxMotorYaw = 30;
int maxMotorRoll = 30;    //Want this to incline 30 degrees. Same for all power levels?
int maxMotorPitch = 30;   //This should incline quadcopter 30 degrees. Is this the same at all motors at 0 power and all at 150 power?

//int center = 512;
//int deadWidth = 24;

int fl(int roll, int pitch, int yaw, int throttle))
{
  int powerFL = 0;
  if(throttle > (centerThrottle)) //If center moving, add "dead zone."  +deadWidth/2))
    throttleFL = (throttle - (centerThrottle)) * maxMotorThrottle / (1023 - centerThrottle);
    //Multiply percentage of max throttle by throttle power allocated to motor.
    //Throttle is limited: (throttle - centerThrottle) * partOf180MotorMax / maxJoystickDisplacement512;
  if(yaw < centerYaw)
    yawFL = (yaw - centerYaw) * maxYaw / centerYaw;
  if(roll > centerRoll)
    rollFL = (roll - centerRoll) * maxRoll / (1023-centerRoll);
  if(pitch < centerPitch)
    pitchFL = (centerPitch-pitch) * maxPitch / centerPitch;

//if both thumbsticks at center, then employ auto-balance functions. Refer to gyroscope angular offsets.


  powerFL = throttleFL + yawFL + rollFL + pitchFL;
  return powerFL;
}
int fr(int roll, int pitch, int yaw, int throttle))
{
  int powerFR = 0;
  if(throttleFR > (centerThrottle)) //If center moving, add "dead zone."  +deadWidth/2))
    throttle = (throttle - (centerThrottle)) * maxMotorThrottle / (1023 - centerThrottle);
    //Multiply percentage of max throttle by throttle power allocated to motor.
    //Throttle is limited: (throttle - centerThrottle) * partOf180MotorMax / maxJoystickDisplacement512;
  if(yaw > centerYaw)
    yawFR = (centerYaw-yaw) * maxYaw / (1023-centerYaw);
  if(roll < centerRoll)
    rollFR = (centerRoll-roll) * maxRoll / centerRoll;
  if(pitch < centerPitch)
    pitchFR = (centerPitch - pitch) * maxPitch / centerPitch;

//if both thumbsticks at center, then employ auto-balance functions. Refer to gyroscope angular offsets.


  powerFR = throttleFR + yawFR + rollFR + pitchFR;
  return powerFR;
}

int bl(int roll, int pitch, int yaw, int throttle))
{
  int powerBL = 0;
  if(throttle > (centerThrottle)) //If center moving, add "dead zone."  +deadWidth/2))
    throttleBL = (throttle - (centerThrottle)) * maxMotorThrottle / (1023 - centerThrottle);
    //Multiply percentage of max throttle by throttle power allocated to motor.
    //Throttle is limited: (throttle - centerThrottle) * partOf180MotorMax / maxJoystickDisplacement512;
  if(yaw > centerYaw)
    yawBL = (centerYaw-yaw) * maxYaw / (1023-centerYaw);
  if(roll > centerRoll)
    rollBL = (roll - centerRoll) * maxRoll / (1023-centerRoll);
  if(pitch > centerPitch)
    pitchBL = (pitch - centerPitch) * maxPitch / (1023-centerPitch);

//if both thumbsticks at center, then employ auto-balance functions. Refer to gyroscope angular offsets.


  powerBL = throttleBL + yawBL + rollBL + pitchBL;
  return powerBL;
}

int br(int roll, int pitch, int yaw, int throttle))
{
  int powerBR = 0;
  if(throttle > (centerThrottle)) //If center moving, add "dead zone."  +deadWidth/2))
    throttleBR = (throttle - (centerThrottle)) * maxMotorThrottle / (1023 - centerThrottle);
    //Multiply percentage of max throttle by throttle power allocated to motor.
    //Throttle is limited: (throttle - centerThrottle) * partOf180MotorMax / maxJoystickDisplacement512;
  if(yaw < centerYaw)
    yawBR = (yaw-centerYaw) * maxYaw / centerYaw;
  if(roll < centerRoll)
    rollBR = (centerRoll-roll) * maxRoll / centerRoll;
  if(pitch > centerPitch)
    pitchBR = (pitch - centerPitch) * maxPitch / (1023-centerPitch);

//if both thumbsticks at center, then employ auto-balance functions. Refer to gyroscope angular offsets.


  powerBR = throttleBR + yawBR + rollBR + pitchBR;
  return powerBR;
}
